// Package echoapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package echoapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ResourceId defines model for resource_id.
type ResourceId = UuidV4

// Token defines model for token.
type Token = UuidV4

// UuidV4 defines model for uuid_v4.
type UuidV4 = openapi_types.UUID

// PostLocksParams defines parameters for PostLocks.
type PostLocksParams struct {
	ResourceId ResourceId `form:"resource_id" json:"resource_id"`
}

// DeleteLocksResourceIdParams defines parameters for DeleteLocksResourceId.
type DeleteLocksResourceIdParams struct {
	Token Token `form:"token" json:"token"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Lock a resource.
	// (POST /locks)
	PostLocks(ctx echo.Context, params PostLocksParams) error
	// Unlock a resource.
	// (DELETE /locks/{resource_id})
	DeleteLocksResourceId(ctx echo.Context, resourceId ResourceId, params DeleteLocksResourceIdParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostLocks converts echo context to params.
func (w *ServerInterfaceWrapper) PostLocks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLocksParams
	// ------------- Required query parameter "resource_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "resource_id", ctx.QueryParams(), &params.ResourceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLocks(ctx, params)
	return err
}

// DeleteLocksResourceId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLocksResourceId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId ResourceId

	err = runtime.BindStyledParameterWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, ctx.Param("resource_id"), &resourceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteLocksResourceIdParams
	// ------------- Required query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteLocksResourceId(ctx, resourceId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/locks", wrapper.PostLocks)
	router.DELETE(baseURL+"/locks/:resource_id", wrapper.DeleteLocksResourceId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW72/bNhD9V4jbgH5RLNnJgEXfjMTbjLl24STbii5wGfFks5FIlTw5MQz97wNJ/4zd",
	"bVjWIvlkSyLvju+9e8clZLqstEJFFtIl2GyGJfd/DVpdmwwnUrhHXhSjHNIPS/jeYA4pfBdvt8arfXFd",
	"SzGZn0FzG4FAmxlZkdQKUhivwjEpUJHMJZrWnwqaCEjfo/o/UlxhZpCYj8doxolJa2sUjOeEhmUGOUk1",
	"ZZwVOrtnWjHO1qdssQuu2B2y2qJgpJnAAgk3K2mG27Wh7nUh6RLwkZdVgZDCmfih3TkV2Yk4//H8pN1G",
	"ccJz3j5JOmcdnrU7SZJ0IIJcm5ITpD4IRFDyxwGqKc0gPe1EUEq1+0iLysW2ZKSaQtM0EUiVa5eZJPm8",
	"A1fnW674FA3rvutDBHM0NgCTtNqtxJWsK1S8kpDCaStpJRBBxWnm6Y7dSf2/Sltyv/vgXjj00DLOFD4E",
	"WB4kzdhUzlGxjztq+ci4Eswg1Ua59Ss+NpA6KN1+B6MvyXCXoy8ghXfa0sAX4kozvERCY70mpKvic41m",
	"AREoXrpT72o0AoOfa2lQQEqmxmgl5n+vrN1ozW3jBGbQVlpZ9MB0krb7ybQiVB4iXlWFzHz58Ser1baF",
	"PJDGHY5k2D0ppAoAS8LSHi6olUPl8P3Ml+z4yHldONHMiKo0dozxYqYtpefJeRLzSsbzdhzCxMud0zR7",
	"ijMFHEpq80bffcKMjr3ZvODG8MV/6Nyw3CF7mK152syDI43HHrhlts4ytDavi2IRehpFi73X9ZuiYFOk",
	"reKcA2RHu3ovqFPrL93r3qh7xQJKzFPF5Ca71wC702Kx6v2zJHmGFNAYbSaFPNZnXQcu0zlDVZfrevwG",
	"Gxpmo579fb2ny8NqFwXSD9Af/tYd9C8n497V6GZ80Zv0L+F2RxV+3YEsnlL+LOKGo+uj5EXsDjNeW3Sn",
	"drukmvNCCrY1gPUX1+FoaZ/uPcACUlEgv6wtOfZz+RjoL/k97gZiPtGG0/PXxekOl5PuYNzrXr6f9P7o",
	"X11fvTxqd+doGBnb/isMcrFg+Cgt2a/BbROBrcuSm8X6EHxvmEdAfOqmjP8I3qDCPHxio54h5yCHXI2x",
	"1HO0/zAZtSoWTAYxB5fKJdljk/DS5/GzcH116osvTEU3xL/VUIyOT+Lg7c9Pt50Rh9M3OUTdk3kwFQJH",
	"4rV79fXo194QIvh9PBr+vHl6iU6+AvzlOPnZ63Xy4eh68tPoZvhNWRUarXpDwYO/ugXf+CvqF004fHY2",
	"7Hahma/Nbv8gb7lULHyGyF9r//5m7FzlrwAAAP//AD8pIvAOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
