// Package clientapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package clientapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// ResourceId defines model for resource_id.
type ResourceId = UuidV4

// Token defines model for token.
type Token = UuidV4

// UuidV4 defines model for uuid_v4.
type UuidV4 = openapi_types.UUID

// PostLocksParams defines parameters for PostLocks.
type PostLocksParams struct {
	ResourceId ResourceId `form:"resource_id" json:"resource_id"`
}

// DeleteLocksResourceIdParams defines parameters for DeleteLocksResourceId.
type DeleteLocksResourceIdParams struct {
	Token Token `form:"token" json:"token"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostLocks request
	PostLocks(ctx context.Context, params *PostLocksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLocksResourceId request
	DeleteLocksResourceId(ctx context.Context, resourceId ResourceId, params *DeleteLocksResourceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostLocks(ctx context.Context, params *PostLocksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLocksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLocksResourceId(ctx context.Context, resourceId ResourceId, params *DeleteLocksResourceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLocksResourceIdRequest(c.Server, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostLocksRequest generates requests for PostLocks
func NewPostLocksRequest(server string, params *PostLocksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource_id", runtime.ParamLocationQuery, params.ResourceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteLocksResourceIdRequest generates requests for DeleteLocksResourceId
func NewDeleteLocksResourceIdRequest(server string, resourceId ResourceId, params *DeleteLocksResourceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostLocks request
	PostLocksWithResponse(ctx context.Context, params *PostLocksParams, reqEditors ...RequestEditorFn) (*PostLocksResponse, error)

	// DeleteLocksResourceId request
	DeleteLocksResourceIdWithResponse(ctx context.Context, resourceId ResourceId, params *DeleteLocksResourceIdParams, reqEditors ...RequestEditorFn) (*DeleteLocksResourceIdResponse, error)
}

type PostLocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Links *[]struct {
			Unlock *struct {
				Href *string `json:"href,omitempty"`
			} `json:"unlock,omitempty"`
		} `json:"_links,omitempty"`
		Token *Token `json:"token,omitempty"`
	}
	JSON400 *struct {
		// ErrorList Array of enum format errors.
		ErrorList *[]N400ErrorList `json:"error_list,omitempty"`
	}
	JSON409 *struct {
		// ErrorList Array of enum format errors.
		ErrorList *[]N409ErrorList `json:"error_list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostLocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLocksResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// ErrorList Array of enum format errors.
		ErrorList *[]N400ErrorList `json:"error_list,omitempty"`
	}
	JSON404 *struct {
		// ErrorList Array of enum format errors.
		ErrorList *[]N404ErrorList `json:"error_list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteLocksResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLocksResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostLocksWithResponse request returning *PostLocksResponse
func (c *ClientWithResponses) PostLocksWithResponse(ctx context.Context, params *PostLocksParams, reqEditors ...RequestEditorFn) (*PostLocksResponse, error) {
	rsp, err := c.PostLocks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLocksResponse(rsp)
}

// DeleteLocksResourceIdWithResponse request returning *DeleteLocksResourceIdResponse
func (c *ClientWithResponses) DeleteLocksResourceIdWithResponse(ctx context.Context, resourceId ResourceId, params *DeleteLocksResourceIdParams, reqEditors ...RequestEditorFn) (*DeleteLocksResourceIdResponse, error) {
	rsp, err := c.DeleteLocksResourceId(ctx, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLocksResourceIdResponse(rsp)
}

// ParsePostLocksResponse parses an HTTP response from a PostLocksWithResponse call
func ParsePostLocksResponse(rsp *http.Response) (*PostLocksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Links *[]struct {
				Unlock *struct {
					Href *string `json:"href,omitempty"`
				} `json:"unlock,omitempty"`
			} `json:"_links,omitempty"`
			Token *Token `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ErrorList Array of enum format errors.
			ErrorList *[]N400ErrorList `json:"error_list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// ErrorList Array of enum format errors.
			ErrorList *[]N409ErrorList `json:"error_list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteLocksResourceIdResponse parses an HTTP response from a DeleteLocksResourceIdWithResponse call
func ParseDeleteLocksResourceIdResponse(rsp *http.Response) (*DeleteLocksResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLocksResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ErrorList Array of enum format errors.
			ErrorList *[]N400ErrorList `json:"error_list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ErrorList Array of enum format errors.
			ErrorList *[]N404ErrorList `json:"error_list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW72/bNhD9V4jbgH5RLNnJgEXfjMTbjLl24STbii5wGfFks5FIlTw5MQz97wNJ/4zd",
	"bVjWIvlkSyLvju+9e8clZLqstEJFFtIl2GyGJfd/DVpdmwwnUrhHXhSjHNIPS/jeYA4pfBdvt8arfXFd",
	"SzGZn0FzG4FAmxlZkdQKUhivwjEpUJHMJZrWnwqaCEjfo/o/UlxhZpCYj8doxolJa2sUjOeEhmUGOUk1",
	"ZZwVOrtnWjHO1qdssQuu2B2y2qJgpJnAAgk3K2mG27Wh7nUh6RLwkZdVgZDCmfih3TkV2Yk4//H8pN1G",
	"ccJz3j5JOmcdnrU7SZJ0IIJcm5ITpD4IRFDyxwGqKc0gPe1EUEq1+0iLysW2ZKSaQtM0EUiVa5eZJPm8",
	"A1fnW674FA3rvutDBHM0NgCTtNqtxJWsK1S8kpDCaStpJRBBxWnm6Y7dSf2/Sltyv/vgXjj00DLOFD4E",
	"WB4kzdhUzlGxjztq+ci4Eswg1Ua59Ss+NpA6KN1+B6MvyXCXoy8ghXfa0sAX4kozvERCY70mpKvic41m",
	"AREoXrpT72o0AoOfa2lQQEqmxmgl5n+vrN1ozW3jBGbQVlpZ9MB0krb7ybQiVB4iXlWFzHz58Ser1baF",
	"PJDGHY5k2D0ppAoAS8LSHi6olUPl8P3Ml+z4yHldONHMiKo0dozxYqYtpefJeRLzSsbzdhzCxMud0zR7",
	"ijMFHEpq80bffcKMjr3ZvODG8MV/6Nyw3CF7mK152syDI43HHrhlts4ytDavi2IRehpFi73X9ZuiYFOk",
	"reKcA2RHu3ovqFPrL93r3qh7xQJKzFPF5Ca71wC702Kx6v2zJHmGFNAYbSaFPNZnXQcu0zlDVZfrevwG",
	"Gxpmo579fb2ny8NqFwXSD9Af/tYd9C8n497V6GZ80Zv0L+F2RxV+3YEsnlL+LOKGo+uj5EXsDjNeW3Sn",
	"drukmvNCCrY1gPUX1+FoaZ/uPcACUlEgv6wtOfZz+RjoL/k97gZiPtGG0/PXxekOl5PuYNzrXr6f9P7o",
	"X11fvTxqd+doGBnb/isMcrFg+Cgt2a/BbROBrcuSm8X6EHxvmEdAfOqmjP8I3qDCPHxio54h5yCHXI2x",
	"1HO0/zAZtSoWTAYxB5fKJdljk/DS5/GzcH116osvTEU3xL/VUIyOT+Lg7c9Pt50Rh9M3OUTdk3kwFQJH",
	"4rV79fXo194QIvh9PBr+vHl6iU6+AvzlOPnZ63Xy4eh68tPoZvhNWRUarXpDwYO/ugXf+CvqF004fHY2",
	"7Hahma/Nbv8gb7lULHyGyF9r//5m7FzlrwAAAP//AD8pIvAOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
